FROM amd64/alpine:3.7
MAINTAINER Tom Denham <tom@projectcalico.org>

ARG QEMU_VERSION=2.9.1-1

# we need these two distinct lists. The first one is the names used by the qemu distributions
# these second is the names used by golang see https://github.com/golang/go/blob/master/src/go/build/syslist.go
# the primary difference as of this writing is that qemu uses aarch64 and golang uses arm64
ARG QEMU_ARCHS="aarch64 ppc64le s390x"
ARG CROSS_ARCHS="arm64 ppc64le s390x"

ARG MANIFEST_TOOL_VERSION=v0.7.0

ENV GOLANG_VERSION=1.10.1

# Install su-exec for use in the entrypoint.sh (so processes run as the right user)
# Install bash for the entry script (and because it's generally useful)
# Install curl to download glide
# Install git for fetching Go dependencies
# Install ssh for fetching Go dependencies
# Install mercurial for fetching go dependencies
# Install wget since it's useful for fetching
# Install make for building things
# Install util-linux for column command (used for output formatting).
# Install go from a newer version of alpine so v1.10 is installed

# Recompile the standard library with cgo disabled.  This prevents the standard library from being
# marked stale, causing full rebuilds every time.

# When running cross built binaries run-times will be auto-installed,
# ensure the install directory is writable by everyone.
# Ensure that everything under the GOPATH is writable by everyone

# Do all this in a single image layer, otherwise we get a bloated final image (e.g. it copies of the files with and without the permissions changed)
# Go install steps taken from - https://github.com/docker-library/golang/blob/master/1.10/alpine3.7/Dockerfile
RUN apk add --no-cache su-exec curl bash git openssh mercurial make wget util-linux tini file && \
    apk upgrade --no-cache && \
    set -eux;  apk add --no-cache --virtual .build-deps gcc musl-dev openssl go  ;  export   GOROOT_BOOTSTRAP="$(go env GOROOT)"   GOOS="$(go env GOOS)"   GOARCH="$(go env GOARCH)"   GOHOSTOS="$(go env GOHOSTOS)"   GOHOSTARCH="$(go env GOHOSTARCH)"  ;  apkArch="$(apk --print-arch)";  case "$apkArch" in   armhf) export GOARM='6' ;;   x86) export GO386='387' ;;  esac;   wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz";  echo '589449ff6c3ccbff1d391d4e7ab5bb5d5643a5a41a04c99315e55c16bbf73ddc *go.tgz' | sha256sum -c -;  tar -C /usr/local -xzf go.tgz;  rm go.tgz;   cd /usr/local/go/src;  for p in /go-alpine-patches/*.patch; do   [ -f "$p" ] || continue;   patch -p2 -i "$p";  done;  ./make.bash;   rm -rf /go-alpine-patches;  apk del .build-deps;   export PATH="/usr/local/go/bin:$PATH";  go version; \
    CGO_ENABLED=0 go install -v std && for arch in ${CROSS_ARCHS}; do GOARCH=${arch} CGO_ENABLED=0 go install -v std; done

# Disable cgo so that binaries we build will be fully static.
ENV CGO_ENABLED=0
ENV GOPATH=/go
ENV PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"

# Disable ssh host key checking
RUN echo 'Host *' >> /etc/ssh/ssh_config
RUN echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config

# Install glide
RUN go get github.com/Masterminds/glide
ENV GLIDE_HOME /home/user/.glide

# Install dep
RUN go get github.com/golang/dep/cmd/dep

# Install ginkgo CLI tool for running tests
RUN go get github.com/onsi/ginkgo/ginkgo

# Install linting tools.
RUN go get -u gopkg.in/alecthomas/gometalinter.v2
RUN ln -s `which gometalinter.v2` /usr/local/bin/gometalinter

# This installs about 170MB of binaries. We're only using errchk and vet...
RUN gometalinter --install

# Install license checking tool.
RUN go get github.com/pmezard/licenses

# Install tool to merge coverage reports.
RUN go get github.com/wadey/gocovmerge

# Install CLI tool for working with yaml files
RUN go get github.com/mikefarah/yaml

# Install goveralls
RUN go get github.com/mattn/goveralls

# Enable non-native runs on amd64 architecture hosts
RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done && chmod +x /usr/bin/qemu-*

RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFEST_TOOL_VERSION}/manifest-tool-linux-amd64 > manifest-tool && \
    chmod +x manifest-tool && \
    mv manifest-tool /usr/bin/

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/entrypoint.sh"]
