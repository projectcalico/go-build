FROM calico/bpftool:v5.0-arm64 as bpftool

FROM debian:buster as qemu
MAINTAINER Reza Ramezanpour <reza@projectcalico.org>

ARG QEMU_VERSION=4.2.0-6
ARG QEMU_ARCHS="aarch64"

RUN apt update && apt install -y curl

# Enable non-native runs on amd64 architecture hosts
RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done
RUN chmod +x /usr/bin/qemu-*

FROM arm64v8/golang:1.20.2-buster

ARG MANIFEST_TOOL_VERSION=v1.0.2

# Enable non-native builds of this image on an amd64 hosts.
# This must be the first RUN command in this file!
COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/

# Install bash for the entry script (and because it's generally useful)
# Install curl
# Install git for fetching Go dependencies
# Install ssh for fetching Go dependencies
# Install wget since it's useful for fetching
# Install make for building things
# Install util-linux for column command (used for output formatting).
# Install grep, sed, zip, and jq for use in some Makefiles
# Install gcc for cgo.
# Install lsb-release software-properties-common for llvm upgrade script
# Install clang, libbpf and newer kernel headers for building BPF binaries.
RUN echo 'APT::Default-Release "buster";' > /etc/apt/apt.conf.d/99defaultrelease && \
    echo 'deb     http://ftp.am.debian.org/debian/    buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list && \
    apt-get -y -o Acquire::Check-Valid-Until=false update &&  \
    apt-get -y upgrade && \
    apt-get install --no-install-recommends -y -t buster-backports \
        libbpf-dev linux-headers-arm64 && \
    apt-get install --no-install-recommends -y \
        curl git openssh-client make wget util-linux file grep sed jq zip \
        lsb-release software-properties-common binutils iproute2 \
        ca-certificates gcc libc-dev bsdmainutils strace libpcap-dev

RUN curl -sfL https://apt.llvm.org/llvm.sh | bash -s -- 12 && \
    apt-get install clang-12

RUN apt-get autoclean && apt-get clean && \
    rm /etc/apt/sources.list.d/buster-backports.list

# su-exec is used by the entrypoint script to execute the user's command with the right UID/GID.
# (sudo doesn't work easily in a container.)  The version was current master at the time of writing.
ARG SU_EXEC_VER=212b75144bbc06722fbd7661f651390dc47a43d1
RUN  set -ex; \
     curl -o /sbin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/${SU_EXEC_VER}/su-exec.c; \
     gcc -Wall /sbin/su-exec.c -o/sbin/su-exec; \
     chown root:root /sbin/su-exec; \
     chmod 0755 /sbin/su-exec; \
     rm /sbin/su-exec.c

ARG MOCKERY_VER=2.14.0
RUN curl -L https://github.com/vektra/mockery/releases/download/v${MOCKERY_VER}/mockery_${MOCKERY_VER}_Linux_x86_64.tar.gz | tar zxvf - -C /usr/local/bin --extract mockery
RUN chmod +x /usr/local/bin/mockery

# Disable ssh host key checking
RUN echo 'Host *' >> /etc/ssh/ssh_config \
  && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config

ENV GOROOT=/usr/local/go

ENV GO_LINT_VERSION=v1.52.2

# Install go programs that we rely on
RUN \
  go install github.com/onsi/ginkgo/ginkgo@v1.16.5 && \
  go install golang.org/x/tools/cmd/goimports@v0.1.10 && \
  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $GO_LINT_VERSION && \
  golangci-lint --version && \
  go install github.com/pmezard/licenses@master && \
  go install github.com/wadey/gocovmerge@master && \
  go install github.com/mikefarah/yq/v3@3.4.1 && \
  go install github.com/jstemmer/go-junit-report@v1.0.0 && \
  go install golang.org/x/tools/cmd/stringer@v0.1.10 && \
  go install k8s.io/code-generator/cmd/openapi-gen@v0.24.0 && \
  go install k8s.io/code-generator/cmd/deepcopy-gen@v0.24.0 && \
  go install github.com/swaggo/swag/cmd/swag@v1.8.7 && \
  go install gotest.tools/gotestsum@latest && \
  rm -rf /go/src/* /root/.cache

# Ensure that everything under the GOPATH is writable by everyone
RUN chmod -R 777 $GOPATH

RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFEST_TOOL_VERSION}/manifest-tool-linux-arm64 > manifest-tool && \
    chmod +x manifest-tool && \
    mv manifest-tool /usr/bin/

# crane is needed for our release targets to copy images from the dev registries to the release registries.
RUN wget https://github.com/google/go-containerregistry/releases/download/v0.4.1/go-containerregistry_Linux_arm64.tar.gz && \
    tar -xvf go-containerregistry_Linux_arm64.tar.gz && \
    chmod +x crane && \
    mv crane /usr/bin

# Install ginkgo v2 as ginkgo2 and keep ginkgo v1 as ginkgo
RUN mv /go/bin/ginkgo /go/bin/ginkgo1 && \
  go install github.com/onsi/ginkgo/v2/ginkgo@v2.3.0 && \
  mv /go/bin/ginkgo /go/bin/ginkgo2 && \
  mv /go/bin/ginkgo1 /go/bin/ginkgo

# Install necessary Kubernetes binaries used in tests.
RUN wget https://dl.k8s.io/v1.25.8/bin/linux/arm64/kube-apiserver -O /usr/local/bin/kube-apiserver && chmod +x /usr/local/bin/kube-apiserver && \
	wget https://dl.k8s.io/release/v1.25.8/bin/linux/arm64/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && \
	wget https://dl.k8s.io/v1.25.8/bin/linux/arm64/kube-controller-manager -O /usr/local/bin/kube-controller-manager && chmod +x /usr/local/bin/kube-controller-manager

# Add bpftool for Felix UT/FV.
COPY --from=bpftool /bpftool /usr/bin

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
