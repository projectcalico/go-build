FROM alpine:3.16 as qemu

ARG QEMU_VERSION=4.2.0-6
ARG QEMU_ARCHS="s390x"

RUN apk --update add curl

# Enable non-native runs on amd64 architecture hosts
RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done
RUN chmod +x /usr/bin/qemu-*

FROM s390x/golang:1.18.8-alpine3.16
MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)

ARG MANIFEST_TOOL_VERSION=v1.0.2

# Enable non-native builds of this image on an amd64 hosts.
# This must be the first RUN command in this file!
COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/

# Install su-exec for use in the entrypoint.sh (so processes run as the right user)
# Install bash for the entry script (and because it's generally useful)
# Install curl
# Install git for fetching Go dependencies
# Install ssh for fetching Go dependencies
# Install mercurial for fetching go dependencies
# Install wget since it's useful for fetching
# Install make for building things
# Install util-linux for column command (used for output formatting).
# Install grep, sed, zip, and jq for use in some Makefiles
# Install shadow for useradd (it allows to use big UID)
RUN apk update && apk add --no-cache su-exec curl bash git openssh mercurial make wget util-linux tini file grep sed jq zip shadow libpcap-dev
RUN apk upgrade --no-cache

# Disable ssh host key checking
RUN echo 'Host *' >> /etc/ssh/ssh_config \
  && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config

# Disable cgo so that binaries we build will be fully static.
ENV CGO_ENABLED=0

# Recompile the standard library with cgo disabled.  This prevents the standard library from being
# marked stale, causing full rebuilds every time.
RUN go install -v std

# Install ginkgo CLI tool for running tests
RUN go install github.com/onsi/ginkgo/ginkgo@v1.16.5

# Install linting tools
ENV GO_LINT_VERSION=v1.50.1
RUN \
  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $GO_LINT_VERSION && \
  golangci-lint --version

# Install license checking tool.
RUN go install github.com/pmezard/licenses@master

# Install tool to merge coverage reports.
RUN go install github.com/wadey/gocovmerge@master

# Install CLI tool for working with yaml files
RUN go install github.com/mikefarah/yq/v3@3.4.1

# Delete all the Go sources that were downloaded, we only rely on the binaries
RUN rm -rf /go/src/*

# Install generation tools.
RUN  go install k8s.io/code-generator/cmd/openapi-gen@master
RUN  go install k8s.io/code-generator/cmd/deepcopy-gen@master

# Install ginkgo v2 as ginkgo2 and keep ginkgo v1 as ginkgo
RUN mv /go/bin/ginkgo /go/bin/ginkgo1 && \
  go install github.com/onsi/ginkgo/v2/ginkgo@v2.3.0 && \
  mv /go/bin/ginkgo /go/bin/ginkgo2 && \
  mv /go/bin/ginkgo1 /go/bin/ginkgo

# Install Swaggo
RUN go install github.com/swaggo/swag/cmd/swag@v1.8.7

# Install necessary Kubernetes binaries used in tests.
RUN wget https://dl.k8s.io/v1.24.0/bin/linux/s390x/kube-apiserver -O /usr/local/bin/kube-apiserver && chmod +x /usr/local/bin/kube-apiserver && \
	wget https://dl.k8s.io/release/v1.24.0/bin/linux/s390x/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && \
	wget https://dl.k8s.io/v1.24.0/bin/linux/s390x/kube-controller-manager -O /usr/local/bin/kube-controller-manager && chmod +x /usr/local/bin/kube-controller-manager

# Ensure that everything under the GOPATH is writable by everyone
RUN chmod -R 777 $GOPATH

RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFEST_TOOL_VERSION}/manifest-tool-linux-s390x > manifest-tool && \
    chmod +x manifest-tool && \
    mv manifest-tool /usr/bin/

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/entrypoint.sh"]
